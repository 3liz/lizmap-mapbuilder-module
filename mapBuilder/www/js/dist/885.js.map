{"version":3,"file":"885.js","mappings":"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","sources":["webpack://ol-webpack/./modules/BaseLayers/bingStreets.js","webpack://ol-webpack/./node_modules/ol/source/BingMaps.js"],"sourcesContent":["/********************************************************************\n * Class used to fill information about the Base Layer Bing Streets *\n ********************************************************************/\n\nimport {Tile as TileLayer} from 'ol/layer.js';\nimport {BingMaps} from 'ol/source.js';\n\n/**\n * Get the raster to create a source for a map.\n * @returns {TileLayer} The raster.\n */\nexport function getRaster() {\n  return new TileLayer({\n    visible: true,\n    preload: Infinity,\n    source: new BingMaps({\n      key: document.getElementById(\"jforms_mapBuilderAdmin_config_baseLayerKeyBing\").value,\n      imagerySet: \"Road\"\n    })\n  });\n}\n\n\n/**\n * Get the raster to create a source for a map.\n * Used in the admin preview.\n * Different function due to some differences in the preview page.\n * @returns {TileLayer} The raster.\n */\nexport function getPreviewRaster() {\n  return new TileLayer({\n    visible: true,\n    preload: Infinity,\n    source: new BingMaps({\n      key: document.getElementById(\"_baseLayerKeyBing\").textContent,\n      imagerySet: \"Road\"\n    })\n  });\n}\n\n\n/**\n * Get the InkMap JSON spec about this layer.\n * @param {BingMaps} activeLayer Layer to print.\n * @returns {[{}]|number} Layer specs.\n */\nexport function getInkmapSpec(activeLayer) {\n  if (activeLayer.getApiKey() === '') {\n    return 10;\n  }\n  return [{\n    \"type\": \"BingMaps\",\n    \"imagerySet\": activeLayer.getImagerySet(),\n    \"apiKey\": activeLayer.getApiKey(),\n  }];\n}\n","/**\n * @module ol/source/BingMaps\n */\n\nimport TileImage from './TileImage.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {createOrUpdate} from '../tilecoord.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\n\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  const z = tileCoord[0];\n  const digits = new Array(z);\n  let mask = 1 << (z - 1);\n  let i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nconst TOS_ATTRIBUTION =\n  '<a class=\"ol-attribution-bing-tos\" ' +\n  'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' +\n  'Terms of Use</a>';\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {boolean} [placeholderTiles] Whether to show BingMaps placeholder tiles when zoomed past the maximum level provided in an area. When `false`, requests beyond\n * the maximum zoom level will return no tile. When `true`, the placeholder tile will be returned. When not set, the default behaviour of the imagery set takes place,\n * which is unique for each imagery set in BingMaps.\n */\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources Resources.\n */\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nclass BingMaps extends TileImage {\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n  constructor(options) {\n    const hidpi = options.hidpi !== undefined ? options.hidpi : false;\n\n    super({\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = hidpi;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.imagerySet_ = options.imagerySet;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.placeholderTiles_ = options.placeholderTiles;\n\n    const url =\n      'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +\n      this.imagerySet_ +\n      '?uriScheme=https&include=ImageryProviders&key=' +\n      this.apiKey_ +\n      '&c=' +\n      this.culture_;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((json) => this.handleImageryMetadataResponse(json));\n  }\n\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n  getApiKey() {\n    return this.apiKey_;\n  }\n\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n  getImagerySet() {\n    return this.imagerySet_;\n  }\n\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n  handleImageryMetadataResponse(response) {\n    if (\n      response.statusCode != 200 ||\n      response.statusDescription != 'OK' ||\n      response.authenticationResultCode != 'ValidCredentials' ||\n      response.resourceSets.length != 1 ||\n      response.resourceSets[0].resources.length != 1\n    ) {\n      this.setState('error');\n      return;\n    }\n\n    const resource = response.resourceSets[0].resources[0];\n    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n\n    const sourceProjection = this.getProjection();\n    const extent = extentFromProjection(sourceProjection);\n    const scale = this.hidpi_ ? 2 : 1;\n    const tileSize =\n      resource.imageWidth == resource.imageHeight\n        ? resource.imageWidth / scale\n        : [resource.imageWidth / scale, resource.imageHeight / scale];\n\n    const tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize,\n    });\n    this.tileGrid = tileGrid;\n\n    const culture = this.culture_;\n    const hidpi = this.hidpi_;\n    const placeholderTiles = this.placeholderTiles_;\n    this.tileUrlFunction = createFromTileUrlFunctions(\n      resource.imageUrlSubdomains.map(function (subdomain) {\n        /** @type {import('../tilecoord.js').TileCoord} */\n        const quadKeyTileCoord = [0, 0, 0];\n        const imageUrl = resource.imageUrl\n          .replace('{subdomain}', subdomain)\n          .replace('{culture}', culture);\n        return (\n          /**\n           * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n           * @param {number} pixelRatio Pixel ratio.\n           * @param {import(\"../proj/Projection.js\").default} projection Projection.\n           * @return {string|undefined} Tile URL.\n           */\n          function (tileCoord, pixelRatio, projection) {\n            if (!tileCoord) {\n              return undefined;\n            }\n            createOrUpdate(\n              tileCoord[0],\n              tileCoord[1],\n              tileCoord[2],\n              quadKeyTileCoord,\n            );\n            const url = new URL(\n              imageUrl.replace('{quadkey}', quadKey(quadKeyTileCoord)),\n            );\n            const params = url.searchParams;\n            if (hidpi) {\n              params.set('dpi', 'd1');\n              params.set('device', 'mobile');\n            }\n            if (placeholderTiles === true) {\n              params.delete('n');\n            } else if (placeholderTiles === false) {\n              params.set('n', 'z');\n            }\n            return url.toString();\n          }\n        );\n      }),\n    );\n\n    if (resource.imageryProviders) {\n      const transform = getTransformFromProjections(\n        getProjection('EPSG:4326'),\n        this.getProjection(),\n      );\n\n      this.setAttributions((frameState) => {\n        const attributions = [];\n        const viewState = frameState.viewState;\n        const tileGrid = this.getTileGrid();\n        const z = tileGrid.getZForResolution(\n          viewState.resolution,\n          this.zDirection,\n        );\n        const tileCoord = tileGrid.getTileCoordForCoordAndZ(\n          viewState.center,\n          z,\n        );\n        const zoom = tileCoord[0];\n        resource.imageryProviders.map(function (imageryProvider) {\n          let intersecting = false;\n          const coverageAreas = imageryProvider.coverageAreas;\n          for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {\n            const coverageArea = coverageAreas[i];\n            if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n              const bbox = coverageArea.bbox;\n              const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n              const extent = applyTransform(epsg4326Extent, transform);\n              if (intersects(extent, frameState.extent)) {\n                intersecting = true;\n                break;\n              }\n            }\n          }\n          if (intersecting) {\n            attributions.push(imageryProvider.attribution);\n          }\n        });\n\n        attributions.push(TOS_ATTRIBUTION);\n        return attributions;\n      });\n    }\n\n    this.setState('ready');\n  }\n}\n\nexport default BingMaps;\n"],"names":["getRaster","visible","preload","Infinity","source","key","document","getElementById","value","imagerySet","getPreviewRaster","textContent","getInkmapSpec","activeLayer","getApiKey","getImagerySet","BingMaps","constructor","options","hidpi","undefined","super","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","this","hidpi_","culture_","culture","maxZoom_","maxZoom","apiKey_","imagerySet_","placeholderTiles_","placeholderTiles","url","fetch","then","response","json","handleImageryMetadataResponse","statusCode","statusDescription","authenticationResultCode","resourceSets","length","resources","setState","resource","zoomMax","sourceProjection","getProjection","extent","scale","tileSize","imageWidth","imageHeight","tileGrid","minZoom","zoomMin","tileUrlFunction","imageUrlSubdomains","map","subdomain","quadKeyTileCoord","imageUrl","replace","tileCoord","pixelRatio","URL","z","digits","Array","i","charCode","mask","String","fromCharCode","join","quadKey","params","searchParams","set","delete","toString","imageryProviders","transform","setAttributions","frameState","attributions","viewState","getTileGrid","getZForResolution","resolution","zoom","getTileCoordForCoordAndZ","center","imageryProvider","intersecting","coverageAreas","ii","coverageArea","bbox","epsg4326Extent","push","attribution"],"sourceRoot":""}