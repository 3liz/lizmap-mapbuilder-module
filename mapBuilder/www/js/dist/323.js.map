{"version":3,"file":"323.js","mappings":"0MAWO,SAASA,IACZ,OAAO,IAAI,IAAU,CACjBC,OAAQ,IAAI,IAAW,CACnBC,MAAO,uBAGnB,CASO,SAASC,IACZ,OAAOH,GACX,CAQO,SAASI,EAAcC,GAC1B,MAAO,CAAC,CACJ,KAAQ,MACR,IAAOA,EAAYC,UAAU,IAErC,C,yDC9BA,MAoBMC,EAAc,CAClB,eAAkB,CAChBC,UAAW,OAEb,0BAA6B,CAC3BA,UAAW,OAEb,sBAAyB,CACvBA,UAAW,OAEb,qBAAwB,CACtBA,UAAW,OAEb,wBAA2B,CACzBA,UAAW,OAEb,aAAgB,CACdA,UAAW,OAEb,oBAAuB,CACrBA,UAAW,OAEb,mBAAsB,CACpBA,UAAW,OAEb,kBAAqB,CACnBA,UAAW,OAEb,kBAAqB,CACnBA,UAAW,OAEb,eAAkB,CAChBA,UAAW,OAEb,oBAAuB,CACrBA,UAAW,OAEb,kBAAqB,CACnBA,UAAW,OAEb,SAAY,CACVA,UAAW,OAEb,WAAc,CACZA,UAAW,QAOTC,EAAiB,CACrB,eAAkB,CAChBC,QAAS,EACTC,QAAS,GACTC,QAAQ,GAEV,aAAgB,CACdF,QAAS,EACTC,QAAS,GACTC,QAAQ,GAEV,kBAAqB,CACnBF,QAAS,EACTC,QAAS,GACTC,QAAQ,IAqCZ,MAAMC,UAAmB,IAIvB,WAAAC,CAAYC,GACV,MAAMC,EAAID,EAAQb,MAAMe,QAAQ,KAC1BC,GAAiB,GAANF,EAAUD,EAAQb,MAAQa,EAAQb,MAAMiB,MAAM,EAAGH,GAC5DI,EAAiBX,EAAeS,IAAa,CACjD,QAAW,EACX,QAAW,GACX,QAAU,GAGNG,EAAcd,EAAYQ,EAAQb,OAClCoB,EAAQP,EAAQQ,OAAS,YAAcR,EAAQQ,OAAS,GACxDX,EAASQ,EAAeR,QAAUG,EAAQH,OAAS,MAAQ,GAE3DY,OACYC,IAAhBV,EAAQS,IACJT,EAAQS,IACR,sCACAT,EAAQb,MACR,eACAU,EACA,IACAS,EAAYb,UACZc,EAEAI,EAAe,CArJvB,+EAOA,8EA8I6D,KAEvDX,EAAQb,MAAMyB,WAAW,YAC3BD,EAAaE,OAAO,EAAG,EA1I3B,0EA6IEC,MAAM,CACJH,aAAcA,EACdI,UAAWf,EAAQe,UACnBC,YAAa,YACbC,YAAajB,EAAQiB,YACrBrB,aACsBc,IAApBV,EAAQJ,QACJI,EAAQJ,QACRS,EAAeT,QACrBD,aACsBe,IAApBV,EAAQL,QACJK,EAAQL,QACRU,EAAeV,QACrBuB,2BAA4BlB,EAAQkB,2BACpCC,iBAAkBnB,EAAQmB,iBAC1BC,WAAYpB,EAAQoB,WACpBX,IAAKA,EACLY,eAAgBxB,EAAS,EAAI,EAC7ByB,MAAOtB,EAAQsB,MACfC,WAAYvB,EAAQuB,YAExB,EAGF,S","sources":["webpack://ol-webpack/./modules/BaseLayers/osmStadiaMapsToner.js","webpack://ol-webpack/./node_modules/ol/source/StadiaMaps.js"],"sourcesContent":["/***************************************************************************\n * Class used to fill information about the Base Layer OSM StadiaMapsToner *\n ***************************************************************************/\n\nimport {Tile as TileLayer} from 'ol/layer.js';\nimport {StadiaMaps} from 'ol/source.js';\n\n/**\n * Get the raster to create a source for a map.\n * @returns {TileLayer} The raster.\n */\nexport function getRaster() {\n    return new TileLayer({\n        source: new StadiaMaps({\n            layer: 'stamen_toner_lite'\n        })\n    });\n}\n\n\n/**\n * Get the raster to create a source for a map.\n * Used in the admin preview.\n * Different function due to some differences in the preview page.\n * @returns {TileLayer} The raster.\n */\nexport function getPreviewRaster() {\n    return getRaster();\n}\n\n\n/**\n * Get the InkMap JSON spec about this layer.\n * @param {StadiaMaps} activeLayer Layer to print.\n * @returns {[{}]} Layer specs.\n */\nexport function getInkmapSpec(activeLayer) {\n    return [{\n        \"type\": \"XYZ\",\n        \"url\": activeLayer.getUrls()[0]\n    }];\n}\n","/**\n * @module ol/source/StadiaMaps\n */\n\nimport XYZ from './XYZ.js';\nimport {ATTRIBUTION as OSM_ATTRIBUTION} from './OSM.js';\n\n/**\n * @const\n * @type string\n */\nconst STADIA_ATTRIBUTION =\n  '&copy; <a href=\"https://www.stadiamaps.com/\" target=\"_blank\">Stadia Maps</a>';\n\n/**\n * @const\n * @type string\n */\nconst OMT_ATTRIBUTION =\n  '&copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a>';\n\n/**\n * @const\n * @type string\n */\nconst STAMEN_ATTRIBUTION =\n  '&copy; <a href=\"https://stamen.com/\" target=\"_blank\">Stamen Design</a>';\n\n/**\n * @type {Object<string, {extension: string}>}\n */\nconst LayerConfig = {\n  'stamen_terrain': {\n    extension: 'png',\n  },\n  'stamen_terrain_background': {\n    extension: 'png',\n  },\n  'stamen_terrain_labels': {\n    extension: 'png',\n  },\n  'stamen_terrain_lines': {\n    extension: 'png',\n  },\n  'stamen_toner_background': {\n    extension: 'png',\n  },\n  'stamen_toner': {\n    extension: 'png',\n  },\n  'stamen_toner_labels': {\n    extension: 'png',\n  },\n  'stamen_toner_lines': {\n    extension: 'png',\n  },\n  'stamen_toner_lite': {\n    extension: 'png',\n  },\n  'stamen_watercolor': {\n    extension: 'jpg',\n  },\n  'alidade_smooth': {\n    extension: 'png',\n  },\n  'alidade_smooth_dark': {\n    extension: 'png',\n  },\n  'alidade_satellite': {\n    extension: 'png',\n  },\n  'outdoors': {\n    extension: 'png',\n  },\n  'osm_bright': {\n    extension: 'png',\n  },\n};\n\n/**\n * @type {Object<string, {minZoom: number, maxZoom: number, retina: boolean}>}\n */\nconst ProviderConfig = {\n  'stamen_terrain': {\n    minZoom: 0,\n    maxZoom: 18,\n    retina: true,\n  },\n  'stamen_toner': {\n    minZoom: 0,\n    maxZoom: 20,\n    retina: true,\n  },\n  'stamen_watercolor': {\n    minZoom: 1,\n    maxZoom: 18,\n    retina: false,\n  },\n};\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {string} layer Layer name. Valid values: `alidade_smooth`, `alidade_smooth_dark`, `outdoors`, `stamen_terrain`, `stamen_terrain_background`, `stamen_terrain_labels`, `stamen_terrain_lines`, `stamen_toner_background`, `stamen_toner`, `stamen_toner_labels`, `stamen_toner_lines`, `stamen_toner_lite`, `stamen_watercolor`, and `osm_bright`.\n * @property {number} [minZoom] Minimum zoom.\n * @property {number} [maxZoom] Maximum zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [apiKey] Stadia Maps API key. Not required for localhost or most public web deployments. See https://docs.stadiamaps.com/authentication/ for details.\n * @property {boolean} [retina] Use retina tiles (if available; not available for Stamen Watercolor).\n */\n\n/**\n * @classdesc\n * Layer source for the Stadia Maps tile server.\n * @api\n */\nclass StadiaMaps extends XYZ {\n  /**\n   * @param {Options} options StadiaMaps options.\n   */\n  constructor(options) {\n    const i = options.layer.indexOf('-');\n    const provider = i == -1 ? options.layer : options.layer.slice(0, i);\n    const providerConfig = ProviderConfig[provider] || {\n      'minZoom': 0,\n      'maxZoom': 20,\n      'retina': true,\n    };\n\n    const layerConfig = LayerConfig[options.layer];\n    const query = options.apiKey ? '?api_key=' + options.apiKey : '';\n    const retina = providerConfig.retina && options.retina ? '@2x' : '';\n\n    const url =\n      options.url !== undefined\n        ? options.url\n        : 'https://tiles.stadiamaps.com/tiles/' +\n          options.layer +\n          '/{z}/{x}/{y}' +\n          retina +\n          '.' +\n          layerConfig.extension +\n          query;\n\n    const attributions = [STADIA_ATTRIBUTION, OMT_ATTRIBUTION, OSM_ATTRIBUTION];\n\n    if (options.layer.startsWith('stamen_')) {\n      attributions.splice(1, 0, STAMEN_ATTRIBUTION);\n    }\n\n    super({\n      attributions: attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      maxZoom:\n        options.maxZoom !== undefined\n          ? options.maxZoom\n          : providerConfig.maxZoom,\n      minZoom:\n        options.minZoom !== undefined\n          ? options.minZoom\n          : providerConfig.minZoom,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      tilePixelRatio: retina ? 2 : 1,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n    });\n  }\n}\n\nexport default StadiaMaps;\n"],"names":["getRaster","source","layer","getPreviewRaster","getInkmapSpec","activeLayer","getUrls","LayerConfig","extension","ProviderConfig","minZoom","maxZoom","retina","StadiaMaps","constructor","options","i","indexOf","provider","slice","providerConfig","layerConfig","query","apiKey","url","undefined","attributions","startsWith","splice","super","cacheSize","crossOrigin","interpolate","reprojectionErrorThreshold","tileLoadFunction","transition","tilePixelRatio","wrapX","zDirection"],"sourceRoot":""}